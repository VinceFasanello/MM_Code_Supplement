mydata$Ind.select[i] <- 1
} else if (mydata$Ind.p.unexp.002[i] >= mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 2
} else {
mydata$Ind.select[i] <- NA
}
} # Tot.select and Ind. select are in complete agreement (other than one special case) -- use only Tot.select for selection below
mydata$pick.dataset <- mydata$Tot.select
# override selection for low count (less than 10,000 cts) experiments
for(i in 1:nrow(mydata)){
if ((mydata$pick.dataset[i] == 2) & (mydata$t.cts.002rr[i] < 10000) & (mydata$t.cts.002[i] >= 10000)){
mydata$pick.dataset[i] <- 1
}
}
as.character(mydata$exp.id)
as.character(mydata$exp.id)[1]
i <- as.character(mydata$exp.id)[1]
mydata[which(mydata$exp.id == i), "pick.dataset"]
i <- as.character(mydata$exp.id)[35]
x <- mydata[which(mydata$exp.id == i), "pick.dataset"]
View(cts002)
cts002[which(colnames(cts002) == i), ]
cts002[,which(colnames(cts002) == i)]
cts002[ , which(colnames(cts002) == i)] <- cts002rr[, which(colnames(cts002rr) == i)]
cts002rr[, "20_S13_E"]
# File: 002_Consolidation.R
# Purpose: Consolidate 002 and 002 reruns data to minimize contamination
# Created: 20180904
# Edited: 20180904
# Clean up & setup -------------------------------------------------------------
rm(list=ls())
options(scipen = 999)	# turn off scientific notatio
dir_002_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Metadata/"
dir_002_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Counts/"
dir_002_Reruns_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Metadata/"
dir_002_Reruns_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Counts/"
dir_002_CC_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Metadata/"
dir_002_CC_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Counts/"
# load and prep 002 counts & metadata ------------------------------------------
setwd(dir_002_Metadata)
layout002 <- read.csv("002_layout.csv", stringsAsFactors = F, header = T)
setwd(dir_002_Counts)
load("counts.Rdata")
cts002 <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002 <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002 <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# load and prep 002_Reruns counts & metadata -----------------------------------
setwd(dir_002_Reruns_Metadata)
layout002rr <- read.csv("002_Reruns_layout.csv", stringsAsFactors = F, header = T)
layout002rr$barcode.23 <- ""
setwd(dir_002_Reruns_Counts)
load("counts.Rdata")
cts002rr <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002rr <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002rr <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# Ensure layout002 and layout002rr column agreement ----------------------------
# layout002rr does not have the pcr2 column.
colnames(layout002)[1:14]
colnames(layout002rr)[1:14]
layout002rr$pcr2 <- NA
layout002rr <- layout002rr[,c(c(1:14),ncol(layout002rr), c(15:(ncol(layout002rr) - 1)) ),]
colnames(layout002) == colnames(layout002rr) # now everything looks good.
# add a column for sequencing run 1 vs run 2
layout002$seq.run <- 1
layout002rr$seq.run <- 2
# Compare total counts and contamination rates ---------------------------------
# create subset of cts002 that contains only those exps that were rerun
cts002t <- cts002[ , which(colnames(cts002) %in% colnames(cts002rr))]
cts.exp002t <- cts.exp002[ , which(colnames(cts.exp002) %in% colnames(cts002rr))]
cts.unexp002t <- cts.unexp002[ , which(colnames(cts.unexp002) %in% colnames(cts002rr))]
colnames(cts002t) == colnames(cts002rr) # all the same column names are there, but sort order not perfect...
colnames(cts002t) == colnames(cts002rr[, c(colnames(cts002t))]) # there is the fix.
cts002rr <- cts002rr[, c(colnames(cts002t))]
cts.exp002rr <- cts.exp002rr[, c(colnames(cts002t))]
cts.unexp002rr <- cts.unexp002rr[, c(colnames(cts002t))]
mydata <- data.frame(colnames(cts002t))
colnames(mydata) <- "exp.id"
mydata$t.cts.002 <- colSums(cts002t, na.rm = T)
mydata$t.exp.cts.002 <- colSums(cts.exp002t, na.rm = T)
mydata$t.unexp.cts.002 <- colSums(cts.unexp002t, na.rm = T)
mydata$m.exp.cts.002 <- round(colMeans(cts.exp002t, na.rm = T))
mydata$m.unexp.cts.002 <- round(colMeans(cts.unexp002t, na.rm = T))
mydata$t.cts.002rr <- colSums(cts002rr, na.rm = T)
mydata$t.exp.cts.002rr <- colSums(cts.exp002rr, na.rm = T)
mydata$t.unexp.cts.002rr <- colSums(cts.unexp002rr, na.rm = T)
mydata$m.exp.cts.002rr <- round(colMeans(cts.exp002rr, na.rm = T))
mydata$m.unexp.cts.002rr <- round(colMeans(cts.unexp002rr, na.rm = T))
mydata$Tot.p.unexp.002 <- mydata$t.unexp.cts.002 / mydata$t.cts.002
mydata$Tot.p.unexp.002rr <- mydata$t.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Ind.p.unexp.002 <- mydata$m.unexp.cts.002 / mydata$t.cts.002
mydata$Ind.p.unexp.002rr <- mydata$m.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Tot.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Tot.p.unexp.002[i] < mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 1
} else if (mydata$Tot.p.unexp.002[i] >= mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 2
} else {
mydata$Tot.select[i] <- NA
}
}
mydata$Ind.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Ind.p.unexp.002[i] < mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 1
} else if (mydata$Ind.p.unexp.002[i] >= mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 2
} else {
mydata$Ind.select[i] <- NA
}
} # Tot.select and Ind. select are in complete agreement (other than one special case) -- use only Tot.select for selection below
mydata$pick.dataset <- mydata$Tot.select
# override selection for low count (less than 10,000 cts) experiments
for(i in 1:nrow(mydata)){
if ((mydata$pick.dataset[i] == 2) & (mydata$t.cts.002rr[i] < 10000) & (mydata$t.cts.002[i] >= 10000)){
mydata$pick.dataset[i] <- 1
}
}
for (i in as.character(mydata$exp.id)) {
x <- mydata[which(mydata$exp.id == i), "pick.dataset"]
if (x == 2) {
layout002[which(layout002$experiment.id == i) , ] <- layout002rr[which(layout002rr$experiment.id == i) , ]
cts002[ , which(colnames(cts002) == i)] <- cts002rr[, which(colnames(cts002rr) == i)]
}
}
sum(is.na(layout002$pcr2)) == sum(mydata$pick.dataset == 2) # yes! it works.
setwd(dir_002_CC_Counts)
# File: 002_Consolidation.R
# Purpose: Consolidate 002 and 002 reruns data to minimize contamination
# Created: 20180904
# Edited: 20180904
# Clean up & setup -------------------------------------------------------------
rm(list=ls())
options(scipen = 999)	# turn off scientific notatio
dir_002_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Metadata/"
dir_002_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Counts/"
dir_002_Reruns_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Metadata/"
dir_002_Reruns_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Counts/"
dir_002_CC_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Metadata/"
dir_002_CC_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Counts/"
# load and prep 002 counts & metadata ------------------------------------------
setwd(dir_002_Metadata)
layout002 <- read.csv("002_layout.csv", stringsAsFactors = F, header = T)
setwd(dir_002_Counts)
load("counts.Rdata")
cts002 <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002 <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002 <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# load and prep 002_Reruns counts & metadata -----------------------------------
setwd(dir_002_Reruns_Metadata)
layout002rr <- read.csv("002_Reruns_layout.csv", stringsAsFactors = F, header = T)
layout002rr$barcode.23 <- ""
setwd(dir_002_Reruns_Counts)
load("counts.Rdata")
cts002rr <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002rr <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002rr <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# Ensure layout002 and layout002rr column agreement ----------------------------
# layout002rr does not have the pcr2 column.
colnames(layout002)[1:14]
colnames(layout002rr)[1:14]
layout002rr$pcr2 <- NA
layout002rr <- layout002rr[,c(c(1:14),ncol(layout002rr), c(15:(ncol(layout002rr) - 1)) ),]
colnames(layout002) == colnames(layout002rr) # now everything looks good.
# add a column for sequencing run 1 vs run 2
layout002$seq.run <- 1
layout002rr$seq.run <- 2
# Compare total counts and contamination rates ---------------------------------
# create subset of cts002 that contains only those exps that were rerun
cts002t <- cts002[ , which(colnames(cts002) %in% colnames(cts002rr))]
cts.exp002t <- cts.exp002[ , which(colnames(cts.exp002) %in% colnames(cts002rr))]
cts.unexp002t <- cts.unexp002[ , which(colnames(cts.unexp002) %in% colnames(cts002rr))]
colnames(cts002t) == colnames(cts002rr) # all the same column names are there, but sort order not perfect...
colnames(cts002t) == colnames(cts002rr[, c(colnames(cts002t))]) # there is the fix.
cts002rr <- cts002rr[, c(colnames(cts002t))]
cts.exp002rr <- cts.exp002rr[, c(colnames(cts002t))]
cts.unexp002rr <- cts.unexp002rr[, c(colnames(cts002t))]
mydata <- data.frame(colnames(cts002t))
colnames(mydata) <- "exp.id"
mydata$t.cts.002 <- colSums(cts002t, na.rm = T)
mydata$t.exp.cts.002 <- colSums(cts.exp002t, na.rm = T)
mydata$t.unexp.cts.002 <- colSums(cts.unexp002t, na.rm = T)
mydata$m.exp.cts.002 <- round(colMeans(cts.exp002t, na.rm = T))
mydata$m.unexp.cts.002 <- round(colMeans(cts.unexp002t, na.rm = T))
mydata$t.cts.002rr <- colSums(cts002rr, na.rm = T)
mydata$t.exp.cts.002rr <- colSums(cts.exp002rr, na.rm = T)
mydata$t.unexp.cts.002rr <- colSums(cts.unexp002rr, na.rm = T)
mydata$m.exp.cts.002rr <- round(colMeans(cts.exp002rr, na.rm = T))
mydata$m.unexp.cts.002rr <- round(colMeans(cts.unexp002rr, na.rm = T))
mydata$Tot.p.unexp.002 <- mydata$t.unexp.cts.002 / mydata$t.cts.002
mydata$Tot.p.unexp.002rr <- mydata$t.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Ind.p.unexp.002 <- mydata$m.unexp.cts.002 / mydata$t.cts.002
mydata$Ind.p.unexp.002rr <- mydata$m.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Tot.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Tot.p.unexp.002[i] < mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 1
} else if (mydata$Tot.p.unexp.002[i] >= mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 2
} else {
mydata$Tot.select[i] <- NA
}
}
mydata$Ind.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Ind.p.unexp.002[i] < mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 1
} else if (mydata$Ind.p.unexp.002[i] >= mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 2
} else {
mydata$Ind.select[i] <- NA
}
} # Tot.select and Ind. select are in complete agreement (other than one special case) -- use only Tot.select for selection below
mydata$pick.dataset <- mydata$Tot.select
# override selection for low count (less than 10,000 cts) experiments
for(i in 1:nrow(mydata)){
if ((mydata$pick.dataset[i] == 2) & (mydata$t.cts.002rr[i] < 10000) & (mydata$t.cts.002[i] >= 10000)){
mydata$pick.dataset[i] <- 1
}
}
setwd(dir_002_CC_Counts)
consolidation.summary.table.002 <- mydata
save(consolidation.summary.table.002, file = "consolidation.summary.table.002.Rdata")
for (i in as.character(mydata$exp.id)) {
x <- mydata[which(mydata$exp.id == i), "pick.dataset"]
if (x == 2) {
layout002[which(layout002$experiment.id == i) , ] <- layout002rr[which(layout002rr$experiment.id == i) , ]
cts002[ , which(colnames(cts002) == i)] <- cts002rr[, which(colnames(cts002rr) == i)]
}
}
sum(is.na(layout002$pcr2)) == sum(mydata$pick.dataset == 2) # yes! it works.
# File: 002_Consolidation.R
# Purpose: Consolidate 002 and 002 reruns data to minimize contamination
# Created: 20180904
# Edited: 20180904
# Clean up & setup -------------------------------------------------------------
rm(list=ls())
options(scipen = 999)	# turn off scientific notatio
dir_002_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Metadata/"
dir_002_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Counts/"
dir_002_Reruns_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Metadata/"
dir_002_Reruns_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Counts/"
dir_002_CC_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Metadata/"
dir_002_CC_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Counts/"
# load and prep 002 counts & metadata ------------------------------------------
setwd(dir_002_Metadata)
layout002 <- read.csv("002_layout.csv", stringsAsFactors = F, header = T)
setwd(dir_002_Counts)
load("counts.Rdata")
cts002 <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002 <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002 <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# load and prep 002_Reruns counts & metadata -----------------------------------
setwd(dir_002_Reruns_Metadata)
layout002rr <- read.csv("002_Reruns_layout.csv", stringsAsFactors = F, header = T)
layout002rr$barcode.23 <- ""
setwd(dir_002_Reruns_Counts)
load("counts.Rdata")
cts002rr <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002rr <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002rr <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# Ensure layout002 and layout002rr column agreement ----------------------------
# layout002rr does not have the pcr2 column.
colnames(layout002)[1:14]
colnames(layout002rr)[1:14]
layout002rr$pcr2 <- NA
layout002rr <- layout002rr[,c(c(1:14),ncol(layout002rr), c(15:(ncol(layout002rr) - 1)) ),]
colnames(layout002) == colnames(layout002rr) # now everything looks good.
# add a column for sequencing run 1 vs run 2
layout002$seq.run <- 1
layout002rr$seq.run <- 2
# Compare total counts and contamination rates ---------------------------------
# create subset of cts002 that contains only those exps that were rerun
cts002t <- cts002[ , which(colnames(cts002) %in% colnames(cts002rr))]
cts.exp002t <- cts.exp002[ , which(colnames(cts.exp002) %in% colnames(cts002rr))]
cts.unexp002t <- cts.unexp002[ , which(colnames(cts.unexp002) %in% colnames(cts002rr))]
colnames(cts002t) == colnames(cts002rr) # all the same column names are there, but sort order not perfect...
colnames(cts002t) == colnames(cts002rr[, c(colnames(cts002t))]) # there is the fix.
cts002rr <- cts002rr[, c(colnames(cts002t))]
cts.exp002rr <- cts.exp002rr[, c(colnames(cts002t))]
cts.unexp002rr <- cts.unexp002rr[, c(colnames(cts002t))]
mydata <- data.frame(colnames(cts002t))
colnames(mydata) <- "exp.id"
mydata$t.cts.002 <- colSums(cts002t, na.rm = T)
mydata$t.exp.cts.002 <- colSums(cts.exp002t, na.rm = T)
mydata$t.unexp.cts.002 <- colSums(cts.unexp002t, na.rm = T)
mydata$m.exp.cts.002 <- round(colMeans(cts.exp002t, na.rm = T))
mydata$m.unexp.cts.002 <- round(colMeans(cts.unexp002t, na.rm = T))
mydata$t.cts.002rr <- colSums(cts002rr, na.rm = T)
mydata$t.exp.cts.002rr <- colSums(cts.exp002rr, na.rm = T)
mydata$t.unexp.cts.002rr <- colSums(cts.unexp002rr, na.rm = T)
mydata$m.exp.cts.002rr <- round(colMeans(cts.exp002rr, na.rm = T))
mydata$m.unexp.cts.002rr <- round(colMeans(cts.unexp002rr, na.rm = T))
mydata$Tot.p.unexp.002 <- mydata$t.unexp.cts.002 / mydata$t.cts.002
mydata$Tot.p.unexp.002rr <- mydata$t.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Ind.p.unexp.002 <- mydata$m.unexp.cts.002 / mydata$t.cts.002
mydata$Ind.p.unexp.002rr <- mydata$m.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Tot.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Tot.p.unexp.002[i] < mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 1
} else if (mydata$Tot.p.unexp.002[i] >= mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 2
} else {
mydata$Tot.select[i] <- NA
}
}
mydata$Ind.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Ind.p.unexp.002[i] < mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 1
} else if (mydata$Ind.p.unexp.002[i] >= mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 2
} else {
mydata$Ind.select[i] <- NA
}
} # Tot.select and Ind. select are in complete agreement (other than one special case) -- use only Tot.select for selection below
mydata$pick.dataset <- mydata$Tot.select
# override selection for low count (less than 10,000 cts) experiments
for(i in 1:nrow(mydata)){
if ((mydata$pick.dataset[i] == 2) & (mydata$t.cts.002rr[i] < 10000) & (mydata$t.cts.002[i] >= 10000)){
mydata$pick.dataset[i] <- 1
}
}
setwd(dir_002_CC_Counts)
consolidation.summary.table.002 <- mydata
save(consolidation.summary.table.002, file = "consolidation.summary.table.002.Rdata")
for (i in as.character(mydata$exp.id)) {
x <- mydata[which(mydata$exp.id == i), "pick.dataset"]
if (x == 2) {
layout002[which(layout002$experiment.id == i) , ] <- layout002rr[which(layout002rr$experiment.id == i) , ]
cts002[ , which(colnames(cts002) == i)] <- cts002rr[, which(colnames(cts002rr) == i)]
cts.exp002[ , which(colnames(cts.exp002) == i)] <- cts.exp002rr[, which(colnames(cts.exp002rr) == i)]
cts.unexp002[ , which(colnames(cts.unexp002) == i)] <- cts.unexp002rr[, which(colnames(cts.unexp002rr) == i)]
}
}
sum(is.na(layout002$pcr2)) == sum(mydata$pick.dataset == 2) # yes! it works.
write.csv(layout002, file = "002_CC_layout.csv")
# File: 002_Consolidation.R
# Purpose: Consolidate 002 and 002 reruns data to minimize contamination
# Created: 20180904
# Edited: 20180904
# Clean up & setup -------------------------------------------------------------
rm(list=ls())
options(scipen = 999)	# turn off scientific notatio
dir_002_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Metadata/"
dir_002_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Counts/"
dir_002_Reruns_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Metadata/"
dir_002_Reruns_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Counts/"
dir_002_CC_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Metadata/"
dir_002_CC_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Counts/"
# load and prep 002 counts & metadata ------------------------------------------
setwd(dir_002_Metadata)
layout002 <- read.csv("002_layout.csv", stringsAsFactors = F, header = T)
setwd(dir_002_Counts)
load("counts.Rdata")
cts002 <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002 <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002 <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# load and prep 002_Reruns counts & metadata -----------------------------------
setwd(dir_002_Reruns_Metadata)
layout002rr <- read.csv("002_Reruns_layout.csv", stringsAsFactors = F, header = T)
layout002rr$barcode.23 <- ""
setwd(dir_002_Reruns_Counts)
load("counts.Rdata")
cts002rr <- counts[1:(nrow(counts) - 1),]
load("counts.expected.Rdata")
cts.exp002rr <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002rr <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected)
# Ensure layout002 and layout002rr column agreement ----------------------------
# layout002rr does not have the pcr2 column.
colnames(layout002)[1:14]
colnames(layout002rr)[1:14]
layout002rr$pcr2 <- NA
layout002rr <- layout002rr[,c(c(1:14),ncol(layout002rr), c(15:(ncol(layout002rr) - 1)) ),]
colnames(layout002) == colnames(layout002rr) # now everything looks good.
# add a column for sequencing run 1 vs run 2
layout002$seq.run <- 1
layout002rr$seq.run <- 2
# Compare total counts and contamination rates ---------------------------------
# create subset of cts002 that contains only those exps that were rerun
cts002t <- cts002[ , which(colnames(cts002) %in% colnames(cts002rr))]
cts.exp002t <- cts.exp002[ , which(colnames(cts.exp002) %in% colnames(cts002rr))]
cts.unexp002t <- cts.unexp002[ , which(colnames(cts.unexp002) %in% colnames(cts002rr))]
colnames(cts002t) == colnames(cts002rr) # all the same column names are there, but sort order not perfect...
colnames(cts002t) == colnames(cts002rr[, c(colnames(cts002t))]) # there is the fix.
cts002rr <- cts002rr[, c(colnames(cts002t))]
cts.exp002rr <- cts.exp002rr[, c(colnames(cts002t))]
cts.unexp002rr <- cts.unexp002rr[, c(colnames(cts002t))]
mydata <- data.frame(colnames(cts002t))
colnames(mydata) <- "exp.id"
mydata$t.cts.002 <- colSums(cts002t, na.rm = T)
mydata$t.exp.cts.002 <- colSums(cts.exp002t, na.rm = T)
mydata$t.unexp.cts.002 <- colSums(cts.unexp002t, na.rm = T)
mydata$m.exp.cts.002 <- round(colMeans(cts.exp002t, na.rm = T))
mydata$m.unexp.cts.002 <- round(colMeans(cts.unexp002t, na.rm = T))
mydata$t.cts.002rr <- colSums(cts002rr, na.rm = T)
mydata$t.exp.cts.002rr <- colSums(cts.exp002rr, na.rm = T)
mydata$t.unexp.cts.002rr <- colSums(cts.unexp002rr, na.rm = T)
mydata$m.exp.cts.002rr <- round(colMeans(cts.exp002rr, na.rm = T))
mydata$m.unexp.cts.002rr <- round(colMeans(cts.unexp002rr, na.rm = T))
mydata$Tot.p.unexp.002 <- mydata$t.unexp.cts.002 / mydata$t.cts.002
mydata$Tot.p.unexp.002rr <- mydata$t.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Ind.p.unexp.002 <- mydata$m.unexp.cts.002 / mydata$t.cts.002
mydata$Ind.p.unexp.002rr <- mydata$m.unexp.cts.002rr / mydata$t.cts.002rr
mydata$Tot.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Tot.p.unexp.002[i] < mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 1
} else if (mydata$Tot.p.unexp.002[i] >= mydata$Tot.p.unexp.002rr[i]) {
mydata$Tot.select[i] <- 2
} else {
mydata$Tot.select[i] <- NA
}
}
mydata$Ind.select <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Ind.p.unexp.002[i] < mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 1
} else if (mydata$Ind.p.unexp.002[i] >= mydata$Ind.p.unexp.002rr[i]) {
mydata$Ind.select[i] <- 2
} else {
mydata$Ind.select[i] <- NA
}
} # Tot.select and Ind. select are in complete agreement (other than one special case) -- use only Tot.select for selection below
mydata$pick.dataset <- mydata$Tot.select
# override selection for low count (less than 10,000 cts) experiments
for(i in 1:nrow(mydata)){
if ((mydata$pick.dataset[i] == 2) & (mydata$t.cts.002rr[i] < 10000) & (mydata$t.cts.002[i] >= 10000)){
mydata$pick.dataset[i] <- 1
}
}
setwd(dir_002_CC_Counts)
consolidation.summary.table.002 <- mydata
save(consolidation.summary.table.002, file = "consolidation.summary.table.002.Rdata")
for (i in as.character(mydata$exp.id)) {
x <- mydata[which(mydata$exp.id == i), "pick.dataset"]
if (x == 2) {
layout002[which(layout002$experiment.id == i) , ] <- layout002rr[which(layout002rr$experiment.id == i) , ]
cts002[ , which(colnames(cts002) == i)] <- cts002rr[, which(colnames(cts002rr) == i)]
cts.exp002[ , which(colnames(cts.exp002) == i)] <- cts.exp002rr[, which(colnames(cts.exp002rr) == i)]
cts.unexp002[ , which(colnames(cts.unexp002) == i)] <- cts.unexp002rr[, which(colnames(cts.unexp002rr) == i)]
}
}
sum(is.na(layout002$pcr2)) == sum(mydata$pick.dataset == 2) # yes! it works.
setwd(dir_002_CC_Counts)
counts <- cts002
save(counts, file = "002_CC_counts.Rdata")
counts.expected <- cts.exp002
save(counts.expected, file = "002_CC_counts.expected.Rdata")
counts.unexpected <- cts.unexp002
save(counts.unexpected, file = "002_CC_counts.unexpected.Rdata")
setwd(dir_002_CC_Metadata)
write.csv(layout002, file = "002_CC_layout.csv")
# Clean up & setup -------------------------------------------------------------
rm(list=ls()) # clear out the workspace
# Clean up & setup -------------------------------------------------------------
rm(list=ls()) # clear out the workspace
options(scipen = 999)	# turn off scientific notatio
# set working direcories
dir_002_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Metadata/"
dir_002_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002/002_Sequence_Analysis/002_Counts/"
dir_002_Reruns_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Metadata/"
dir_002_Reruns_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Reruns/002_Reruns_Sequence_Analysis/002_Reruns_Counts/"
dir_002_CC_Metadata <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Metadata/"
dir_002_CC_Counts <- "/Users/boterolab1/Box Sync/CB_VF_Shared/Wet_Lab/Projects/Project_002/Project_002_Consolidated_Counts/002_CC_Counts/"
# load and prep 002 counts & metadata ------------------------------------------
setwd(dir_002_Metadata) # load the 002 layout file
layout002 <- read.csv("002_layout.csv", stringsAsFactors = F, header = T)
setwd(dir_002_Counts) # load the 002 counts, counts expected, and counts unexpected datasets
load("counts.Rdata")
cts002 <- counts[1:(nrow(counts) - 1),] # remove the N1 row from each as well.
load("counts.expected.Rdata")
cts.exp002 <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002 <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected) # clean up this section
# load and prep 002_Reruns counts & metadata -----------------------------------
setwd(dir_002_Reruns_Metadata) # load the 002 Reruns layout file
layout002rr <- read.csv("002_Reruns_layout.csv", stringsAsFactors = F, header = T)
layout002rr$barcode.23 <- "" # fix some NA's
setwd(dir_002_Reruns_Counts) # load the 002 Reruns counts, counts expected, and counts unexpected datasets
load("counts.Rdata")
cts002rr <- counts[1:(nrow(counts) - 1),]  # remove the N1 row from each as well.
load("counts.expected.Rdata")
cts.exp002rr <- counts.expected[1:(nrow(counts.expected) - 1),]
load("counts.unexpected.Rdata")
cts.unexp002rr <- counts.unexpected[1:(nrow(counts.unexpected) - 1),]
rm(counts, counts.expected, counts.unexpected) # clean up this section
